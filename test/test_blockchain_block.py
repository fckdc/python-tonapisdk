# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import fdtapi
from fdtapi.models.blockchain_block import BlockchainBlock  # noqa: E501
from fdtapi.rest import ApiException

class TestBlockchainBlock(unittest.TestCase):
    """BlockchainBlock unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test BlockchainBlock
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BlockchainBlock`
        """
        model = fdtapi.models.blockchain_block.BlockchainBlock()  # noqa: E501
        if include_optional :
            return BlockchainBlock(
                workchain_id = 0, 
                shard = '8000000000000000', 
                seqno = 21734019, 
                root_hash = '131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85', 
                file_hash = 'A6A0BD6608672B11B79538A50B2204E748305C12AA0DED9C16CF0006CE3AF8DB', 
                global_id = -239, 
                version = 0, 
                after_merge = True, 
                before_split = True, 
                after_split = True, 
                want_split = True, 
                want_merge = True, 
                key_block = True, 
                gen_utime = 1674826775, 
                start_lt = 23814011000000, 
                end_lt = 23814011000001, 
                vert_seqno = 0, 
                gen_catchain_seqno = 0, 
                min_ref_mc_seqno = 0, 
                prev_key_block_seqno = 0, 
                gen_software_version = 0, 
                gen_software_capabilities = 0, 
                master_ref = '(-1,4234234,8000000000000000)', 
                prev_refs = [
                    '["(-1",4234235,"8000000000000000)"]'
                    ], 
                in_msg_descr_length = 0, 
                out_msg_descr_length = 0, 
                rand_seed = '131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85', 
                created_by = 'A6A0BD6608672B11B79538A50B2204E748305C12AA0DED9C16CF0006CE3AF8DB'
            )
        else :
            return BlockchainBlock(
                workchain_id = 0,
                shard = '8000000000000000',
                seqno = 21734019,
                root_hash = '131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85',
                file_hash = 'A6A0BD6608672B11B79538A50B2204E748305C12AA0DED9C16CF0006CE3AF8DB',
                global_id = -239,
                version = 0,
                after_merge = True,
                before_split = True,
                after_split = True,
                want_split = True,
                want_merge = True,
                key_block = True,
                gen_utime = 1674826775,
                start_lt = 23814011000000,
                end_lt = 23814011000001,
                vert_seqno = 0,
                gen_catchain_seqno = 0,
                min_ref_mc_seqno = 0,
                prev_key_block_seqno = 0,
                prev_refs = [
                    '["(-1",4234235,"8000000000000000)"]'
                    ],
                in_msg_descr_length = 0,
                out_msg_descr_length = 0,
                rand_seed = '131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85',
                created_by = 'A6A0BD6608672B11B79538A50B2204E748305C12AA0DED9C16CF0006CE3AF8DB',
        )
        """

    def testBlockchainBlock(self):
        """Test BlockchainBlock"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
