# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from fdtapi.models.block_raw import BlockRaw
from fdtapi.models.init_state_raw import InitStateRaw

class GetRawMasterchainInfo200Response(BaseModel):
    """
    GetRawMasterchainInfo200Response
    """
    last: BlockRaw = Field(...)
    state_root_hash: StrictStr = Field(...)
    init: InitStateRaw = Field(...)
    __properties = ["last", "state_root_hash", "init"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetRawMasterchainInfo200Response:
        """Create an instance of GetRawMasterchainInfo200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of last
        if self.last:
            _dict['last'] = self.last.to_dict()
        # override the default output from pydantic by calling `to_dict()` of init
        if self.init:
            _dict['init'] = self.init.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetRawMasterchainInfo200Response:
        """Create an instance of GetRawMasterchainInfo200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetRawMasterchainInfo200Response.parse_obj(obj)

        _obj = GetRawMasterchainInfo200Response.parse_obj({
            "last": BlockRaw.from_dict(obj.get("last")) if obj.get("last") is not None else None,
            "state_root_hash": obj.get("state_root_hash"),
            "init": InitStateRaw.from_dict(obj.get("init")) if obj.get("init") is not None else None
        })
        return _obj

