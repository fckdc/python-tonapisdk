# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from fdtapi.models.account_address import AccountAddress
from fdtapi.models.price import Price

class Sale(BaseModel):
    """
    Sale
    """
    address: StrictStr = Field(...)
    market: AccountAddress = Field(...)
    owner: Optional[AccountAddress] = None
    price: Price = Field(...)
    __properties = ["address", "market", "owner", "price"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Sale:
        """Create an instance of Sale from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of market
        if self.market:
            _dict['market'] = self.market.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Sale:
        """Create an instance of Sale from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Sale.parse_obj(obj)

        _obj = Sale.parse_obj({
            "address": obj.get("address"),
            "market": AccountAddress.from_dict(obj.get("market")) if obj.get("market") is not None else None,
            "owner": AccountAddress.from_dict(obj.get("owner")) if obj.get("owner") is not None else None,
            "price": Price.from_dict(obj.get("price")) if obj.get("price") is not None else None
        })
        return _obj

