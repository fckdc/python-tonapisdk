# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from fdtapi.models.account_address import AccountAddress
from fdtapi.models.refund import Refund

class SmartContractAction(BaseModel):
    """
    SmartContractAction
    """
    executor: AccountAddress = Field(...)
    contract: AccountAddress = Field(...)
    ton_attached: StrictInt = Field(..., description="amount in nanotons")
    operation: StrictStr = Field(...)
    payload: Optional[StrictStr] = None
    refund: Optional[Refund] = None
    __properties = ["executor", "contract", "ton_attached", "operation", "payload", "refund"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SmartContractAction:
        """Create an instance of SmartContractAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of executor
        if self.executor:
            _dict['executor'] = self.executor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract
        if self.contract:
            _dict['contract'] = self.contract.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refund
        if self.refund:
            _dict['refund'] = self.refund.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SmartContractAction:
        """Create an instance of SmartContractAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SmartContractAction.parse_obj(obj)

        _obj = SmartContractAction.parse_obj({
            "executor": AccountAddress.from_dict(obj.get("executor")) if obj.get("executor") is not None else None,
            "contract": AccountAddress.from_dict(obj.get("contract")) if obj.get("contract") is not None else None,
            "ton_attached": obj.get("ton_attached"),
            "operation": obj.get("operation"),
            "payload": obj.get("payload"),
            "refund": Refund.from_dict(obj.get("refund")) if obj.get("refund") is not None else None
        })
        return _obj

