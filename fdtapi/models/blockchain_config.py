# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from fdtapi.models.validators_set import ValidatorsSet

class BlockchainConfig(BaseModel):
    """
    BlockchainConfig
    """
    raw: StrictStr = Field(..., description="config boc in base64 format")
    var_0: StrictStr = Field(..., alias="0", description="config address")
    var_1: StrictStr = Field(..., alias="1", description="elector address")
    var_2: StrictStr = Field(..., alias="2", description="minter address")
    var_4: StrictStr = Field(..., alias="4", description="dns root address")
    var_32: Optional[ValidatorsSet] = Field(None, alias="32")
    var_33: Optional[ValidatorsSet] = Field(None, alias="33")
    var_34: Optional[ValidatorsSet] = Field(None, alias="34")
    var_35: Optional[ValidatorsSet] = Field(None, alias="35")
    var_36: Optional[ValidatorsSet] = Field(None, alias="36")
    var_37: Optional[ValidatorsSet] = Field(None, alias="37")
    __properties = ["raw", "0", "1", "2", "4", "32", "33", "34", "35", "36", "37"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BlockchainConfig:
        """Create an instance of BlockchainConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_32
        if self.var_32:
            _dict['32'] = self.var_32.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_33
        if self.var_33:
            _dict['33'] = self.var_33.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_34
        if self.var_34:
            _dict['34'] = self.var_34.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_35
        if self.var_35:
            _dict['35'] = self.var_35.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_36
        if self.var_36:
            _dict['36'] = self.var_36.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_37
        if self.var_37:
            _dict['37'] = self.var_37.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BlockchainConfig:
        """Create an instance of BlockchainConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BlockchainConfig.parse_obj(obj)

        _obj = BlockchainConfig.parse_obj({
            "raw": obj.get("raw"),
            "var_0": obj.get("0"),
            "var_1": obj.get("1"),
            "var_2": obj.get("2"),
            "var_4": obj.get("4"),
            "var_32": ValidatorsSet.from_dict(obj.get("32")) if obj.get("32") is not None else None,
            "var_33": ValidatorsSet.from_dict(obj.get("33")) if obj.get("33") is not None else None,
            "var_34": ValidatorsSet.from_dict(obj.get("34")) if obj.get("34") is not None else None,
            "var_35": ValidatorsSet.from_dict(obj.get("35")) if obj.get("35") is not None else None,
            "var_36": ValidatorsSet.from_dict(obj.get("36")) if obj.get("36") is not None else None,
            "var_37": ValidatorsSet.from_dict(obj.get("37")) if obj.get("37") is not None else None
        })
        return _obj

