# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from fdtapi.models.get_raw_block_proof200_response_steps_inner_lite_server_block_link_back import GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkBack
from fdtapi.models.get_raw_block_proof200_response_steps_inner_lite_server_block_link_forward import GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForward

class GetRawBlockProof200ResponseStepsInner(BaseModel):
    """
    GetRawBlockProof200ResponseStepsInner
    """
    lite_server_block_link_back: GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkBack = Field(...)
    lite_server_block_link_forward: GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForward = Field(...)
    __properties = ["lite_server_block_link_back", "lite_server_block_link_forward"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetRawBlockProof200ResponseStepsInner:
        """Create an instance of GetRawBlockProof200ResponseStepsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of lite_server_block_link_back
        if self.lite_server_block_link_back:
            _dict['lite_server_block_link_back'] = self.lite_server_block_link_back.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lite_server_block_link_forward
        if self.lite_server_block_link_forward:
            _dict['lite_server_block_link_forward'] = self.lite_server_block_link_forward.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetRawBlockProof200ResponseStepsInner:
        """Create an instance of GetRawBlockProof200ResponseStepsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetRawBlockProof200ResponseStepsInner.parse_obj(obj)

        _obj = GetRawBlockProof200ResponseStepsInner.parse_obj({
            "lite_server_block_link_back": GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkBack.from_dict(obj.get("lite_server_block_link_back")) if obj.get("lite_server_block_link_back") is not None else None,
            "lite_server_block_link_forward": GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForward.from_dict(obj.get("lite_server_block_link_forward")) if obj.get("lite_server_block_link_forward") is not None else None
        })
        return _obj

