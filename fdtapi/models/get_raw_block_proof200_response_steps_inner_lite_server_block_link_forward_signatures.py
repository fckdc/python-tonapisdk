# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, conlist
from fdtapi.models.get_raw_block_proof200_response_steps_inner_lite_server_block_link_forward_signatures_signatures_inner import GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForwardSignaturesSignaturesInner

class GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForwardSignatures(BaseModel):
    """
    GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForwardSignatures
    """
    validator_set_hash: StrictInt = Field(...)
    catchain_seqno: StrictInt = Field(...)
    signatures: conlist(GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForwardSignaturesSignaturesInner) = Field(...)
    __properties = ["validator_set_hash", "catchain_seqno", "signatures"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForwardSignatures:
        """Create an instance of GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForwardSignatures from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in signatures (list)
        _items = []
        if self.signatures:
            for _item in self.signatures:
                if _item:
                    _items.append(_item.to_dict())
            _dict['signatures'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForwardSignatures:
        """Create an instance of GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForwardSignatures from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForwardSignatures.parse_obj(obj)

        _obj = GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForwardSignatures.parse_obj({
            "validator_set_hash": obj.get("validator_set_hash"),
            "catchain_seqno": obj.get("catchain_seqno"),
            "signatures": [GetRawBlockProof200ResponseStepsInnerLiteServerBlockLinkForwardSignaturesSignaturesInner.from_dict(_item) for _item in obj.get("signatures")] if obj.get("signatures") is not None else None
        })
        return _obj

