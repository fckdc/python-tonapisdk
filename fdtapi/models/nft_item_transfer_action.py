# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from fdtapi.models.account_address import AccountAddress
from fdtapi.models.encrypted_comment import EncryptedComment
from fdtapi.models.refund import Refund

class NftItemTransferAction(BaseModel):
    """
    NftItemTransferAction
    """
    sender: Optional[AccountAddress] = None
    recipient: Optional[AccountAddress] = None
    nft: StrictStr = Field(...)
    comment: Optional[StrictStr] = None
    encrypted_comment: Optional[EncryptedComment] = None
    payload: Optional[StrictStr] = Field(None, description="raw hex encoded payload")
    refund: Optional[Refund] = None
    __properties = ["sender", "recipient", "nft", "comment", "encrypted_comment", "payload", "refund"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NftItemTransferAction:
        """Create an instance of NftItemTransferAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of sender
        if self.sender:
            _dict['sender'] = self.sender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recipient
        if self.recipient:
            _dict['recipient'] = self.recipient.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encrypted_comment
        if self.encrypted_comment:
            _dict['encrypted_comment'] = self.encrypted_comment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of refund
        if self.refund:
            _dict['refund'] = self.refund.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NftItemTransferAction:
        """Create an instance of NftItemTransferAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NftItemTransferAction.parse_obj(obj)

        _obj = NftItemTransferAction.parse_obj({
            "sender": AccountAddress.from_dict(obj.get("sender")) if obj.get("sender") is not None else None,
            "recipient": AccountAddress.from_dict(obj.get("recipient")) if obj.get("recipient") is not None else None,
            "nft": obj.get("nft"),
            "comment": obj.get("comment"),
            "encrypted_comment": EncryptedComment.from_dict(obj.get("encrypted_comment")) if obj.get("encrypted_comment") is not None else None,
            "payload": obj.get("payload"),
            "refund": Refund.from_dict(obj.get("refund")) if obj.get("refund") is not None else None
        })
        return _obj

