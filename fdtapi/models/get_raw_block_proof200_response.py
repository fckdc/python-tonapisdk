# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, conlist
from fdtapi.models.block_raw import BlockRaw
from fdtapi.models.get_raw_block_proof200_response_steps_inner import GetRawBlockProof200ResponseStepsInner

class GetRawBlockProof200Response(BaseModel):
    """
    GetRawBlockProof200Response
    """
    complete: StrictBool = Field(...)
    var_from: BlockRaw = Field(..., alias="from")
    to: BlockRaw = Field(...)
    steps: conlist(GetRawBlockProof200ResponseStepsInner) = Field(...)
    __properties = ["complete", "from", "to", "steps"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetRawBlockProof200Response:
        """Create an instance of GetRawBlockProof200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_from
        if self.var_from:
            _dict['from'] = self.var_from.to_dict()
        # override the default output from pydantic by calling `to_dict()` of to
        if self.to:
            _dict['to'] = self.to.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in steps (list)
        _items = []
        if self.steps:
            for _item in self.steps:
                if _item:
                    _items.append(_item.to_dict())
            _dict['steps'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetRawBlockProof200Response:
        """Create an instance of GetRawBlockProof200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GetRawBlockProof200Response.parse_obj(obj)

        _obj = GetRawBlockProof200Response.parse_obj({
            "complete": obj.get("complete"),
            "var_from": BlockRaw.from_dict(obj.get("from")) if obj.get("from") is not None else None,
            "to": BlockRaw.from_dict(obj.get("to")) if obj.get("to") is not None else None,
            "steps": [GetRawBlockProof200ResponseStepsInner.from_dict(_item) for _item in obj.get("steps")] if obj.get("steps") is not None else None
        })
        return _obj

