# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from fdtapi.models.account_address import AccountAddress
from fdtapi.models.state_init import StateInit

class Message(BaseModel):
    """
    Message
    """
    created_lt: StrictInt = Field(...)
    ihr_disabled: StrictBool = Field(...)
    bounce: StrictBool = Field(...)
    bounced: StrictBool = Field(...)
    value: StrictInt = Field(...)
    fwd_fee: StrictInt = Field(...)
    ihr_fee: StrictInt = Field(...)
    destination: Optional[AccountAddress] = None
    source: Optional[AccountAddress] = None
    import_fee: StrictInt = Field(...)
    created_at: StrictInt = Field(...)
    op_code: Optional[StrictStr] = None
    init: Optional[StateInit] = None
    raw_body: Optional[StrictStr] = Field(None, description="hex-encoded BoC with raw message body")
    decoded_op_name: Optional[StrictStr] = None
    decoded_body: Optional[Any] = None
    __properties = ["created_lt", "ihr_disabled", "bounce", "bounced", "value", "fwd_fee", "ihr_fee", "destination", "source", "import_fee", "created_at", "op_code", "init", "raw_body", "decoded_op_name", "decoded_body"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Message:
        """Create an instance of Message from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of init
        if self.init:
            _dict['init'] = self.init.to_dict()
        # set to None if decoded_body (nullable) is None
        # and __fields_set__ contains the field
        if self.decoded_body is None and "decoded_body" in self.__fields_set__:
            _dict['decoded_body'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Message:
        """Create an instance of Message from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Message.parse_obj(obj)

        _obj = Message.parse_obj({
            "created_lt": obj.get("created_lt"),
            "ihr_disabled": obj.get("ihr_disabled"),
            "bounce": obj.get("bounce"),
            "bounced": obj.get("bounced"),
            "value": obj.get("value"),
            "fwd_fee": obj.get("fwd_fee"),
            "ihr_fee": obj.get("ihr_fee"),
            "destination": AccountAddress.from_dict(obj.get("destination")) if obj.get("destination") is not None else None,
            "source": AccountAddress.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "import_fee": obj.get("import_fee"),
            "created_at": obj.get("created_at"),
            "op_code": obj.get("op_code"),
            "init": StateInit.from_dict(obj.get("init")) if obj.get("init") is not None else None,
            "raw_body": obj.get("raw_body"),
            "decoded_op_name": obj.get("decoded_op_name"),
            "decoded_body": obj.get("decoded_body")
        })
        return _obj

