# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from fdtapi.models.action_simple_preview import ActionSimplePreview
from fdtapi.models.auction_bid_action import AuctionBidAction
from fdtapi.models.contract_deploy_action import ContractDeployAction
from fdtapi.models.deposit_stake_action import DepositStakeAction
from fdtapi.models.jetton_swap_action import JettonSwapAction
from fdtapi.models.jetton_transfer_action import JettonTransferAction
from fdtapi.models.nft_item_transfer_action import NftItemTransferAction
from fdtapi.models.nft_purchase_action import NftPurchaseAction
from fdtapi.models.recover_stake_action import RecoverStakeAction
from fdtapi.models.smart_contract_action import SmartContractAction
from fdtapi.models.subscription_action import SubscriptionAction
from fdtapi.models.ton_transfer_action import TonTransferAction
from fdtapi.models.un_subscription_action import UnSubscriptionAction

class Action(BaseModel):
    """
    Action
    """
    type: StrictStr = Field(...)
    status: StrictStr = Field(...)
    ton_transfer: Optional[TonTransferAction] = Field(None, alias="TonTransfer")
    contract_deploy: Optional[ContractDeployAction] = Field(None, alias="ContractDeploy")
    jetton_transfer: Optional[JettonTransferAction] = Field(None, alias="JettonTransfer")
    nft_item_transfer: Optional[NftItemTransferAction] = Field(None, alias="NftItemTransfer")
    subscribe: Optional[SubscriptionAction] = Field(None, alias="Subscribe")
    un_subscribe: Optional[UnSubscriptionAction] = Field(None, alias="UnSubscribe")
    auction_bid: Optional[AuctionBidAction] = Field(None, alias="AuctionBid")
    nft_purchase: Optional[NftPurchaseAction] = Field(None, alias="NftPurchase")
    deposit_stake: Optional[DepositStakeAction] = Field(None, alias="DepositStake")
    recover_stake: Optional[RecoverStakeAction] = Field(None, alias="RecoverStake")
    jetton_swap: Optional[JettonSwapAction] = Field(None, alias="JettonSwap")
    smart_contract_exec: Optional[SmartContractAction] = Field(None, alias="SmartContractExec")
    simple_preview: ActionSimplePreview = Field(...)
    __properties = ["type", "status", "TonTransfer", "ContractDeploy", "JettonTransfer", "NftItemTransfer", "Subscribe", "UnSubscribe", "AuctionBid", "NftPurchase", "DepositStake", "RecoverStake", "JettonSwap", "SmartContractExec", "simple_preview"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('TonTransfer', 'JettonTransfer', 'NftItemTransfer', 'ContractDeploy', 'Subscribe', 'UnSubscribe', 'AuctionBid', 'NftPurchase', 'DepositStake', 'RecoverStake', 'JettonSwap', 'SmartContractExec', 'Unknown'):
            raise ValueError("must be one of enum values ('TonTransfer', 'JettonTransfer', 'NftItemTransfer', 'ContractDeploy', 'Subscribe', 'UnSubscribe', 'AuctionBid', 'NftPurchase', 'DepositStake', 'RecoverStake', 'JettonSwap', 'SmartContractExec', 'Unknown')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ok', 'failed'):
            raise ValueError("must be one of enum values ('ok', 'failed')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Action:
        """Create an instance of Action from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of ton_transfer
        if self.ton_transfer:
            _dict['TonTransfer'] = self.ton_transfer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contract_deploy
        if self.contract_deploy:
            _dict['ContractDeploy'] = self.contract_deploy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jetton_transfer
        if self.jetton_transfer:
            _dict['JettonTransfer'] = self.jetton_transfer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nft_item_transfer
        if self.nft_item_transfer:
            _dict['NftItemTransfer'] = self.nft_item_transfer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscribe
        if self.subscribe:
            _dict['Subscribe'] = self.subscribe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of un_subscribe
        if self.un_subscribe:
            _dict['UnSubscribe'] = self.un_subscribe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auction_bid
        if self.auction_bid:
            _dict['AuctionBid'] = self.auction_bid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nft_purchase
        if self.nft_purchase:
            _dict['NftPurchase'] = self.nft_purchase.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deposit_stake
        if self.deposit_stake:
            _dict['DepositStake'] = self.deposit_stake.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recover_stake
        if self.recover_stake:
            _dict['RecoverStake'] = self.recover_stake.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jetton_swap
        if self.jetton_swap:
            _dict['JettonSwap'] = self.jetton_swap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of smart_contract_exec
        if self.smart_contract_exec:
            _dict['SmartContractExec'] = self.smart_contract_exec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of simple_preview
        if self.simple_preview:
            _dict['simple_preview'] = self.simple_preview.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Action:
        """Create an instance of Action from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Action.parse_obj(obj)

        _obj = Action.parse_obj({
            "type": obj.get("type"),
            "status": obj.get("status"),
            "ton_transfer": TonTransferAction.from_dict(obj.get("TonTransfer")) if obj.get("TonTransfer") is not None else None,
            "contract_deploy": ContractDeployAction.from_dict(obj.get("ContractDeploy")) if obj.get("ContractDeploy") is not None else None,
            "jetton_transfer": JettonTransferAction.from_dict(obj.get("JettonTransfer")) if obj.get("JettonTransfer") is not None else None,
            "nft_item_transfer": NftItemTransferAction.from_dict(obj.get("NftItemTransfer")) if obj.get("NftItemTransfer") is not None else None,
            "subscribe": SubscriptionAction.from_dict(obj.get("Subscribe")) if obj.get("Subscribe") is not None else None,
            "un_subscribe": UnSubscriptionAction.from_dict(obj.get("UnSubscribe")) if obj.get("UnSubscribe") is not None else None,
            "auction_bid": AuctionBidAction.from_dict(obj.get("AuctionBid")) if obj.get("AuctionBid") is not None else None,
            "nft_purchase": NftPurchaseAction.from_dict(obj.get("NftPurchase")) if obj.get("NftPurchase") is not None else None,
            "deposit_stake": DepositStakeAction.from_dict(obj.get("DepositStake")) if obj.get("DepositStake") is not None else None,
            "recover_stake": RecoverStakeAction.from_dict(obj.get("RecoverStake")) if obj.get("RecoverStake") is not None else None,
            "jetton_swap": JettonSwapAction.from_dict(obj.get("JettonSwap")) if obj.get("JettonSwap") is not None else None,
            "smart_contract_exec": SmartContractAction.from_dict(obj.get("SmartContractExec")) if obj.get("SmartContractExec") is not None else None,
            "simple_preview": ActionSimplePreview.from_dict(obj.get("simple_preview")) if obj.get("simple_preview") is not None else None
        })
        return _obj

