# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator
from fdtapi.models.account_address import AccountAddress
from fdtapi.models.jetton_preview import JettonPreview

class JettonSwapAction(BaseModel):
    """
    JettonSwapAction
    """
    dex: StrictStr = Field(...)
    amount_in: StrictStr = Field(...)
    amount_out: StrictStr = Field(...)
    user_wallet: AccountAddress = Field(...)
    router: AccountAddress = Field(...)
    jetton_wallet_in: StrictStr = Field(...)
    jetton_master_in: JettonPreview = Field(...)
    jetton_wallet_out: StrictStr = Field(...)
    jetton_master_out: JettonPreview = Field(...)
    __properties = ["dex", "amount_in", "amount_out", "user_wallet", "router", "jetton_wallet_in", "jetton_master_in", "jetton_wallet_out", "jetton_master_out"]

    @validator('dex')
    def dex_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('stonfi', 'dedust', 'megatonfi'):
            raise ValueError("must be one of enum values ('stonfi', 'dedust', 'megatonfi')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JettonSwapAction:
        """Create an instance of JettonSwapAction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of user_wallet
        if self.user_wallet:
            _dict['user_wallet'] = self.user_wallet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of router
        if self.router:
            _dict['router'] = self.router.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jetton_master_in
        if self.jetton_master_in:
            _dict['jetton_master_in'] = self.jetton_master_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jetton_master_out
        if self.jetton_master_out:
            _dict['jetton_master_out'] = self.jetton_master_out.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JettonSwapAction:
        """Create an instance of JettonSwapAction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JettonSwapAction.parse_obj(obj)

        _obj = JettonSwapAction.parse_obj({
            "dex": obj.get("dex"),
            "amount_in": obj.get("amount_in"),
            "amount_out": obj.get("amount_out"),
            "user_wallet": AccountAddress.from_dict(obj.get("user_wallet")) if obj.get("user_wallet") is not None else None,
            "router": AccountAddress.from_dict(obj.get("router")) if obj.get("router") is not None else None,
            "jetton_wallet_in": obj.get("jetton_wallet_in"),
            "jetton_master_in": JettonPreview.from_dict(obj.get("jetton_master_in")) if obj.get("jetton_master_in") is not None else None,
            "jetton_wallet_out": obj.get("jetton_wallet_out"),
            "jetton_master_out": JettonPreview.from_dict(obj.get("jetton_master_out")) if obj.get("jetton_master_out") is not None else None
        })
        return _obj

