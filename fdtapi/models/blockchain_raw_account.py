# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from fdtapi.models.account_storage_info import AccountStorageInfo

class BlockchainRawAccount(BaseModel):
    """
    BlockchainRawAccount
    """
    address: StrictStr = Field(...)
    balance: StrictInt = Field(...)
    extra_balance: Optional[Dict[str, StrictStr]] = None
    code: Optional[StrictStr] = None
    data: Optional[StrictStr] = None
    last_transaction_lt: StrictInt = Field(...)
    status: StrictStr = Field(...)
    storage: AccountStorageInfo = Field(...)
    __properties = ["address", "balance", "extra_balance", "code", "data", "last_transaction_lt", "status", "storage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BlockchainRawAccount:
        """Create an instance of BlockchainRawAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict['storage'] = self.storage.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BlockchainRawAccount:
        """Create an instance of BlockchainRawAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BlockchainRawAccount.parse_obj(obj)

        _obj = BlockchainRawAccount.parse_obj({
            "address": obj.get("address"),
            "balance": obj.get("balance"),
            "extra_balance": obj.get("extra_balance"),
            "code": obj.get("code"),
            "data": obj.get("data"),
            "last_transaction_lt": obj.get("last_transaction_lt"),
            "status": obj.get("status"),
            "storage": AccountStorageInfo.from_dict(obj.get("storage")) if obj.get("storage") is not None else None
        })
        return _obj

