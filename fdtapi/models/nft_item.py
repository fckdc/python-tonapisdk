# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from fdtapi.models.account_address import AccountAddress
from fdtapi.models.image_preview import ImagePreview
from fdtapi.models.nft_item_collection import NftItemCollection
from fdtapi.models.sale import Sale

class NftItem(BaseModel):
    """
    NftItem
    """
    address: StrictStr = Field(...)
    index: StrictInt = Field(...)
    owner: Optional[AccountAddress] = None
    collection: Optional[NftItemCollection] = None
    verified: StrictBool = Field(...)
    metadata: Dict[str, Any] = Field(...)
    sale: Optional[Sale] = None
    previews: Optional[conlist(ImagePreview)] = None
    dns: Optional[StrictStr] = None
    approved_by: conlist(StrictStr) = Field(...)
    __properties = ["address", "index", "owner", "collection", "verified", "metadata", "sale", "previews", "dns", "approved_by"]

    @validator('approved_by')
    def approved_by_validate_enum(cls, value):
        """Validates the enum"""
        for i in value:
            if i not in ('getgems', 'tonkeeper'):
                raise ValueError("each list item must be one of ('getgems', 'tonkeeper')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> NftItem:
        """Create an instance of NftItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of collection
        if self.collection:
            _dict['collection'] = self.collection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sale
        if self.sale:
            _dict['sale'] = self.sale.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in previews (list)
        _items = []
        if self.previews:
            for _item in self.previews:
                if _item:
                    _items.append(_item.to_dict())
            _dict['previews'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> NftItem:
        """Create an instance of NftItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NftItem.parse_obj(obj)

        _obj = NftItem.parse_obj({
            "address": obj.get("address"),
            "index": obj.get("index"),
            "owner": AccountAddress.from_dict(obj.get("owner")) if obj.get("owner") is not None else None,
            "collection": NftItemCollection.from_dict(obj.get("collection")) if obj.get("collection") is not None else None,
            "verified": obj.get("verified"),
            "metadata": obj.get("metadata"),
            "sale": Sale.from_dict(obj.get("sale")) if obj.get("sale") is not None else None,
            "previews": [ImagePreview.from_dict(_item) for _item in obj.get("previews")] if obj.get("previews") is not None else None,
            "dns": obj.get("dns"),
            "approved_by": obj.get("approved_by")
        })
        return _obj

