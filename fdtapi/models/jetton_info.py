# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from fdtapi.models.jetton_metadata import JettonMetadata
from fdtapi.models.jetton_verification_type import JettonVerificationType

class JettonInfo(BaseModel):
    """
    JettonInfo
    """
    mintable: StrictBool = Field(...)
    total_supply: StrictStr = Field(...)
    metadata: JettonMetadata = Field(...)
    verification: JettonVerificationType = Field(...)
    holders_count: StrictInt = Field(...)
    __properties = ["mintable", "total_supply", "metadata", "verification", "holders_count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JettonInfo:
        """Create an instance of JettonInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JettonInfo:
        """Create an instance of JettonInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JettonInfo.parse_obj(obj)

        _obj = JettonInfo.parse_obj({
            "mintable": obj.get("mintable"),
            "total_supply": obj.get("total_supply"),
            "metadata": JettonMetadata.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "verification": obj.get("verification"),
            "holders_count": obj.get("holders_count")
        })
        return _obj

