# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator

class TvmStackRecord(BaseModel):
    """
    TvmStackRecord
    """
    type: StrictStr = Field(...)
    cell: Optional[StrictStr] = None
    slice: Optional[StrictStr] = None
    num: Optional[StrictStr] = None
    tuple: Optional[conlist(TvmStackRecord)] = None
    __properties = ["type", "cell", "slice", "num", "tuple"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('cell', 'num', 'nan', 'null', 'tuple'):
            raise ValueError("must be one of enum values ('cell', 'num', 'nan', 'null', 'tuple')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TvmStackRecord:
        """Create an instance of TvmStackRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tuple (list)
        _items = []
        if self.tuple:
            for _item in self.tuple:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tuple'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TvmStackRecord:
        """Create an instance of TvmStackRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TvmStackRecord.parse_obj(obj)

        _obj = TvmStackRecord.parse_obj({
            "type": obj.get("type"),
            "cell": obj.get("cell"),
            "slice": obj.get("slice"),
            "num": obj.get("num"),
            "tuple": [TvmStackRecord.from_dict(_item) for _item in obj.get("tuple")] if obj.get("tuple") is not None else None
        })
        return _obj

