# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt

class AccountStorageInfo(BaseModel):
    """
    AccountStorageInfo
    """
    used_cells: StrictInt = Field(...)
    used_bits: StrictInt = Field(...)
    used_public_cells: StrictInt = Field(...)
    last_paid: StrictInt = Field(...)
    due_payment: StrictInt = Field(...)
    __properties = ["used_cells", "used_bits", "used_public_cells", "last_paid", "due_payment"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountStorageInfo:
        """Create an instance of AccountStorageInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountStorageInfo:
        """Create an instance of AccountStorageInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountStorageInfo.parse_obj(obj)

        _obj = AccountStorageInfo.parse_obj({
            "used_cells": obj.get("used_cells"),
            "used_bits": obj.get("used_bits"),
            "used_public_cells": obj.get("used_public_cells"),
            "last_paid": obj.get("last_paid"),
            "due_payment": obj.get("due_payment")
        })
        return _obj

