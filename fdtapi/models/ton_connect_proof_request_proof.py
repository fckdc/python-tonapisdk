# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from fdtapi.models.ton_connect_proof_request_proof_domain import TonConnectProofRequestProofDomain

class TonConnectProofRequestProof(BaseModel):
    """
    TonConnectProofRequestProof
    """
    timestamp: StrictInt = Field(...)
    domain: TonConnectProofRequestProofDomain = Field(...)
    signature: StrictStr = Field(...)
    payload: StrictStr = Field(...)
    state_init: Optional[StrictStr] = None
    __properties = ["timestamp", "domain", "signature", "payload", "state_init"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TonConnectProofRequestProof:
        """Create an instance of TonConnectProofRequestProof from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TonConnectProofRequestProof:
        """Create an instance of TonConnectProofRequestProof from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TonConnectProofRequestProof.parse_obj(obj)

        _obj = TonConnectProofRequestProof.parse_obj({
            "timestamp": obj.get("timestamp"),
            "domain": TonConnectProofRequestProofDomain.from_dict(obj.get("domain")) if obj.get("domain") is not None else None,
            "signature": obj.get("signature"),
            "payload": obj.get("payload"),
            "state_init": obj.get("state_init")
        })
        return _obj

