# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class StorageProvider(BaseModel):
    """
    StorageProvider
    """
    address: StrictStr = Field(...)
    accept_new_contracts: StrictBool = Field(...)
    rate_per_mb_day: StrictInt = Field(...)
    max_span: StrictInt = Field(...)
    minimal_file_size: StrictInt = Field(...)
    maximal_file_size: StrictInt = Field(...)
    __properties = ["address", "accept_new_contracts", "rate_per_mb_day", "max_span", "minimal_file_size", "maximal_file_size"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StorageProvider:
        """Create an instance of StorageProvider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StorageProvider:
        """Create an instance of StorageProvider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StorageProvider.parse_obj(obj)

        _obj = StorageProvider.parse_obj({
            "address": obj.get("address"),
            "accept_new_contracts": obj.get("accept_new_contracts"),
            "rate_per_mb_day": obj.get("rate_per_mb_day"),
            "max_span": obj.get("max_span"),
            "minimal_file_size": obj.get("minimal_file_size"),
            "maximal_file_size": obj.get("maximal_file_size")
        })
        return _obj

