# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt, StrictStr

class Subscription(BaseModel):
    """
    Subscription
    """
    address: StrictStr = Field(...)
    wallet_address: StrictStr = Field(...)
    beneficiary_address: StrictStr = Field(...)
    amount: StrictInt = Field(...)
    period: StrictInt = Field(...)
    start_time: StrictInt = Field(...)
    timeout: StrictInt = Field(...)
    last_payment_time: StrictInt = Field(...)
    last_request_time: StrictInt = Field(...)
    subscription_id: StrictInt = Field(...)
    failed_attempts: StrictInt = Field(...)
    __properties = ["address", "wallet_address", "beneficiary_address", "amount", "period", "start_time", "timeout", "last_payment_time", "last_request_time", "subscription_id", "failed_attempts"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Subscription:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Subscription:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Subscription.parse_obj(obj)

        _obj = Subscription.parse_obj({
            "address": obj.get("address"),
            "wallet_address": obj.get("wallet_address"),
            "beneficiary_address": obj.get("beneficiary_address"),
            "amount": obj.get("amount"),
            "period": obj.get("period"),
            "start_time": obj.get("start_time"),
            "timeout": obj.get("timeout"),
            "last_payment_time": obj.get("last_payment_time"),
            "last_request_time": obj.get("last_request_time"),
            "subscription_id": obj.get("subscription_id"),
            "failed_attempts": obj.get("failed_attempts")
        })
        return _obj

