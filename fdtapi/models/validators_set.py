# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from fdtapi.models.validators_set_list_inner import ValidatorsSetListInner

class ValidatorsSet(BaseModel):
    """
    ValidatorsSet
    """
    utime_since: StrictInt = Field(...)
    utime_until: StrictInt = Field(...)
    total: StrictInt = Field(...)
    main: StrictInt = Field(...)
    total_weight: Optional[StrictInt] = None
    list: conlist(ValidatorsSetListInner) = Field(...)
    __properties = ["utime_since", "utime_until", "total", "main", "total_weight", "list"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValidatorsSet:
        """Create an instance of ValidatorsSet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in list (list)
        _items = []
        if self.list:
            for _item in self.list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['list'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValidatorsSet:
        """Create an instance of ValidatorsSet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValidatorsSet.parse_obj(obj)

        _obj = ValidatorsSet.parse_obj({
            "utime_since": obj.get("utime_since"),
            "utime_until": obj.get("utime_until"),
            "total": obj.get("total"),
            "main": obj.get("main"),
            "total_weight": obj.get("total_weight"),
            "list": [ValidatorsSetListInner.from_dict(_item) for _item in obj.get("list")] if obj.get("list") is not None else None
        })
        return _obj

