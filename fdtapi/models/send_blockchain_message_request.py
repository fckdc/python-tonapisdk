# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist

class SendBlockchainMessageRequest(BaseModel):
    """
    SendBlockchainMessageRequest
    """
    boc: Optional[StrictStr] = None
    batch: Optional[conlist(StrictStr, max_items=10)] = None
    __properties = ["boc", "batch"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SendBlockchainMessageRequest:
        """Create an instance of SendBlockchainMessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SendBlockchainMessageRequest:
        """Create an instance of SendBlockchainMessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SendBlockchainMessageRequest.parse_obj(obj)

        _obj = SendBlockchainMessageRequest.parse_obj({
            "boc": obj.get("boc"),
            "batch": obj.get("batch")
        })
        return _obj

