# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from fdtapi.models.account_address import AccountAddress
from fdtapi.models.action import Action

class AccountEvent(BaseModel):
    """
    An event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
    """
    event_id: StrictStr = Field(...)
    account: AccountAddress = Field(...)
    timestamp: StrictInt = Field(...)
    actions: conlist(Action) = Field(...)
    is_scam: StrictBool = Field(..., description="scam")
    lt: StrictInt = Field(...)
    in_progress: StrictBool = Field(..., description="Event is not finished yet. Transactions still happening")
    extra: StrictInt = Field(..., description="TODO")
    __properties = ["event_id", "account", "timestamp", "actions", "is_scam", "lt", "in_progress", "extra"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountEvent:
        """Create an instance of AccountEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item in self.actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['actions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountEvent:
        """Create an instance of AccountEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountEvent.parse_obj(obj)

        _obj = AccountEvent.parse_obj({
            "event_id": obj.get("event_id"),
            "account": AccountAddress.from_dict(obj.get("account")) if obj.get("account") is not None else None,
            "timestamp": obj.get("timestamp"),
            "actions": [Action.from_dict(_item) for _item in obj.get("actions")] if obj.get("actions") is not None else None,
            "is_scam": obj.get("is_scam"),
            "lt": obj.get("lt"),
            "in_progress": obj.get("in_progress"),
            "extra": obj.get("extra")
        })
        return _obj

