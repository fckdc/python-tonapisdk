# coding: utf-8

"""
    REST api to TON blockchain explorer

    Provide access to indexed TON blockchain  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: support@tonkeeper.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, validator

class PoolInfo(BaseModel):
    """
    PoolInfo
    """
    address: StrictStr = Field(...)
    name: StrictStr = Field(...)
    total_amount: StrictInt = Field(...)
    implementation: StrictStr = Field(...)
    apy: Union[StrictFloat, StrictInt] = Field(..., description="APY in percent")
    min_stake: StrictInt = Field(...)
    cycle_start: StrictInt = Field(..., description="current nomination cycle beginning timestamp")
    cycle_end: StrictInt = Field(..., description="current nomination cycle ending timestamp")
    verified: StrictBool = Field(..., description="this pool has verified source code or managed by trusted company")
    current_nominators: StrictInt = Field(..., description="current number of nominators")
    max_nominators: StrictInt = Field(..., description="maximum number of nominators")
    liquid_jetton_master: Optional[StrictStr] = Field(None, description="for liquid staking master account of jetton")
    nominators_stake: StrictInt = Field(..., description="total stake of all nominators")
    validator_stake: StrictInt = Field(..., description="stake of validator")
    __properties = ["address", "name", "total_amount", "implementation", "apy", "min_stake", "cycle_start", "cycle_end", "verified", "current_nominators", "max_nominators", "liquid_jetton_master", "nominators_stake", "validator_stake"]

    @validator('implementation')
    def implementation_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('whales', 'tf', 'liquidTF'):
            raise ValueError("must be one of enum values ('whales', 'tf', 'liquidTF')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PoolInfo:
        """Create an instance of PoolInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PoolInfo:
        """Create an instance of PoolInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PoolInfo.parse_obj(obj)

        _obj = PoolInfo.parse_obj({
            "address": obj.get("address"),
            "name": obj.get("name"),
            "total_amount": obj.get("total_amount"),
            "implementation": obj.get("implementation"),
            "apy": obj.get("apy"),
            "min_stake": obj.get("min_stake"),
            "cycle_start": obj.get("cycle_start"),
            "cycle_end": obj.get("cycle_end"),
            "verified": obj.get("verified"),
            "current_nominators": obj.get("current_nominators"),
            "max_nominators": obj.get("max_nominators"),
            "liquid_jetton_master": obj.get("liquid_jetton_master"),
            "nominators_stake": obj.get("nominators_stake"),
            "validator_stake": obj.get("validator_stake")
        })
        return _obj

